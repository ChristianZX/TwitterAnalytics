#download_follower: '29180690','949978384045608961','4052291878','1343755626','818525959506821120','99718385','782067510','1949194382','1279339348220162050','1289618816935305216','1353846629204447234','1349086279393300481','878575811250573312','3300484563'
#Launch TWA_main.py to execute
[SETUP]
download_BERT_training_data = False
rate_eval_table_accounts = False

[TASKS]
auto_run = True
download_hashtag = False
download_friends = False
download_followership = False
refresh_download_followership = False
calculate_BERT_self_rating = False
calculate_BERT_friend_rating = False
calculate_ML_friend_rating = False
calculate_LR_followers_rating = False
calculate_combined_rating = False
re_run_ML_friend_training = False
show_word_cloud = False


[GLOBAL]
#used in all or many function calls
#hashtag = AllesÃ–ffnen
hashtag = LasstDieSchulenUndKitasZu
#hashtag = 150JahreVaterland
#hashtag = le0711
#hashtag = DieletzteInstanz

[DOWNLOAD_HASHTAG]
# Downloads entire hashtag and saves it to DB in table s_h_HASHTAG_TIMESTAMP
since = 2021-02-09
until = 2021-02-11
download_parent_tweets = True

[DOWNLOAD_FRIENDS]
#Download friends of hashtag users, unless we already have their friends
sql = SELECT distinct f.user_id
    FROM facts_hashtags f
    left join n_friends fr on f.user_id = fr.user_id
    left join n_users u on f.user_id = u.id
    WHERE from_staging_table like 'INSERT_HASHTAG'
    and fr.user_id is null and u.private_profile is null

[CALCULATE_BERT_SELF_RATING]
#Give Bert LR-self rating to all new users in hashtag
#The LR-self rating is based on the users tweets
;sql = SELECT DISTINCT u.id AS user_id, screen_name AS username
;    FROM n_users u, facts_hashtags fh,
;    (SELECT follows_ids,COUNT (follows_ids) FROM n_followers f GROUP BY follows_ids HAVING COUNT (follows_ids) >= 100) a
;    WHERE CAST (a.follows_ids AS bigint) = u.id
;    --AND lr IS NULL
;    AND fh.user_id = u.id
;    AND fh.from_staging_table like 'INSERT_HASHTAG'

;sql = SELECT DISTINCT t.user_id, t.username from
;    facts_hashtags t, n_users u
;    where t.user_id = u.id
;    --and lr = 'invalid'
;    --and t.user_id = 1328748823150272520
;    and t.user_id in (1343892526818865152,1328748823150272520,1342804038811848705,1292890215753949184,1330623570821701632,1224371766421835778,1342308479399321604)

sql = select id as user_id, screen_name as username from n_users
    where lr is not null
    and lr_pol_last_analysed <= '2021-02-12'
	and lr_conf < 70
#BERT1
#model_path = F:\AI\outputs\political_bert_1605652513.149895\checkpoint-480000
#BERT2
model_path = F:\AI\outputs\political_bert_1612476777.7964592\checkpoint-345000
batch_size = 200

[CALCULATE_LR_FOLLOWERS_RATING]
#Caculate / Refreshes LR-friend rating for all users in hashtag who have a Bert LR rating and follow someone in n_followers
#The LR-friend rating is based on the LR-self rating of account a user follows
sql = SELECT DISTINCT f.follows_ids, u.screen_name, u.lr AS bert_self, f.user_id, u2.lr AS bert_friends
    FROM n_users u, n_followers f, n_users u2, facts_hashtags fh
    WHERE u.id = CAST (f.follows_ids AS bigint)
    AND u2.id = f.user_id
    AND u2.lr in ('links','rechts')
    AND fh.user_id = u.id
    AND fh.from_staging_table like 'INSERT_HASHTAG'
    ORDER BY follows_ids
get_data_from_DB = True

[CALCULATE_ML_FRIEND_RATING]
#Friend Rating based on a Random Forrest
clf_path = friend_rating_classifier_pure_predict.pkl
column_list_path = friend_column_list.pkl
bulk_size = 10000000
#accounts will only be rated every x days
cool_down = 7
#0.7, not 70!
combined_conf_cap_off = 0.7
min_matches = 5
sql = select follows_ids, f.user_id, u.combined_rating from n_followers f, n_users u, n_users u2, facts_hashtags fh
    where f.user_id = u.id
    and cast(u2.id as text) = follows_ids
    and u.combined_conf >= INSERT_combined_conf_cap_off
    and (u2.bert_friends_ml_last_seen is null or (substring (u2.bert_friends_ml_last_seen,0,9) > replace(((NOW() + interval '7 day')::timestamp::date::text),'-','')))
    and u2.id = fh.user_id
	and fh.from_staging_table like 'INSERT_HASHTAG'
	order by follows_ids
    limit INSERT_bulk_size

[RE_RUN_ML_FRIEND_TRAINING]
load_from_db = False
pickle_name_left = df_left_ML_friends.pkl
pickle_name_right = df_right_ML_friends.pkl
classifier_pkl = friend_rating_classifier.pkl
clf_pure_predict_path = friend_rating_classifier_pure_predict.pkl
column_list_path = friend_column_list.pkl
sql_left= select distinct u.id, u.combined_rating, u.combined_conf, f.user_id from n_followers f, n_users u
    where cast (f.follows_ids as numeric) = u.id
    and u.combined_conf >= 0.9
    and u.combined_rating = 'links'
    order by u.id
    limit 750000

sql_right = select distinct u.id, u.combined_rating, u.combined_conf, f.user_id from n_followers f, n_users u
    where cast (f.follows_ids as numeric) = u.id
    and u.combined_conf >= 0.7
    and u.combined_rating = 'rechts'
    order by u.id
    limit 750000


[CALCULATE_COMBINED_RATING]
#Calculates combined score from users self-LR score and users bert_friend score
bert_friends_high_confidence_cap_off = 70
self_conf_high_conf_cap_off = 70
min_required_bert_friend_opinions = 10

sql = SELECT id, screen_name, lr, lr_conf, result_bert_friends, bert_friends_conf, bf_left_number, bf_right_number, bert_friends_ml_result, bert_friends_ml_conf
    FROM n_users
    WHERE (lr IS NOT NULL OR result_bert_friends IS NOT NULL OR bert_friends_ml_result IS NOT null)
    AND id in (SELECT DISTINCT f.user_id
        FROM facts_hashtags f
        WHERE 1=1
        and from_staging_table like 'INSERT_HASHTAG'
      )
    and id = 1342804038811848705

[CALCULATE_BERT_FRIEND_RATING]
#Counts how many left or right friends a user has (using n_friends table). Unlike seamingly similar functions
#(who download and analyse tweets), this one gets user profiles from DB as DF.
#For users that need special attention because they did not get a combined score due to bad BERT_friend score.
conf_level = 70
min_required_bert_friend_opinions = 10
sql_friends = SELECT DISTINCT u.id, u2.id AS friend_id, u2.lr, u2.lr_conf, u2.result_bert_friends, u2.bert_friends_conf,
    u2.bf_left_number, u2.bf_right_number, u2.combined_rating, u2.combined_conf
    FROM facts_hashtags f, n_users u, n_friends fr, n_users u2
    WHERE 1=1
    AND from_staging_table like 'INSERT_HASHTAG'
    AND f.user_id = fr.user_id
    AND fr.user_id = u.id
    AND CAST (fr.follows_ids AS numeric) = u2.id
    AND u2.bf_left_number + u2.bf_right_number >= INSERT_min_required_bert_friend_opinions
    AND u.combined_rating IS NULL
    AND u2.result_bert_friends in ('links', 'rechts')
    AND u2.bert_friends_conf >= INSERT_conf_level
    ORDER BY u.id

#Run combined_scores (again) for users that got a friend rating after downloading their friends directly
bert_friends_high_confidence_cap_off = 70
self_conf_high_conf_cap_off = 70
sql_combined_scores = SELECT id, screen_name, lr, lr_conf, result_bert_friends, bert_friends_conf, bf_left_number, bf_right_number,
    bert_friends_ml_result, bert_friends_ml_conf, bert_friends_ml_result, bert_friends_ml_conf
    FROM n_users
    WHERE (lr IS NOT NULL OR result_bert_friends IS NOT NULL)
    AND combined_rating IS NULL
    AND id in
     (SELECT DISTINCT f.user_id
      FROM facts_hashtags f
      WHERE 1=1
      #from_staging_table like '%INSERT_HASHTAG%'
      )
#combined_scores_calc_launcher(sql, bert_friends_high_confidence_cap_off, self_conf_high_conf_cap_off, min_required_bert_friend_opinions)

#Print number of newly found results
sql_new_results = SELECT COUNT (DISTINCT u.id)
    FROM facts_hashtags f, n_users u
    WHERE from_staging_table like 'INSERT_HASHTAG'
    AND f.user_id = u.id
    AND combined_rating in ('links', 'rechts')
#print (db_functions.select_from_db(sql))


[DOWNLOAD_BERT_TRAINING_DATA]
political_moderate_list = ['_pik_dame_', 'Leekleinkunst', 'MartinaKraus7', 'KAFVKA', 'Volksverpetzer', 'insideX',
                               'FranziLucke', 'leonie_stella9', 'Ute631', 'justMPO', 'anouk_avf', 'Komisaar']
right_wing_populists_list = ['Junge_Freiheit', 'zaferflocken', 'HelmutWachler', 'M_Briefing', 'TinVonWo', 'mcwd12',
                                 'EBlume3', 'h_hendrich']


[RATE_EVAL_TABLE_ACCOUNTS]
#Bert v1
#model_path = F:\AI\outputs\political_bert_1605652513.149895\checkpoint-480000
#Bert v2
model_path = F:\AI\outputs\political_bert_1612476777.7964592\checkpoint-345000

[SHOW_WORD_CLOUD]
sql = select distinct h.tweet
    from facts_hashtags h, n_users u
    where h.user_id = u.id
    and u.combined_rating = 'STANCE_REPLACE'
    and combined_conf >= 0.7
    and from_staging_table like 'INSERT_HASHTAG'

[DOWNLOAD_FOLLOWERSHIP]
#user_ids = select 1137773957115985921 as id from n_followers limit 1
user_ids = select follows_ids as id from
        (select fr.follows_ids, count(fr.follows_ids)
        from facts_hashtags f, n_friends fr
        where from_staging_table like 'INSERT_HASHTAG' and f.user_id = fr.user_id
        group by fr.follows_ids
        having count(fr.follows_ids) >= 500
        order by count(fr.follows_ids) desc) a
      except select cast (user_id as text) from n_followers
download_limit = 12500000
sql_insert =  insert into n_users (id) select distinct user_id from n_followers except select id from n_users
sql_insert_new_followers = insert into n_followers select index, username::text, user_id::numeric, fav_users, fav_ids::text, retrieve_date from temp_followers


[REFRESH_DOWNLOAD_FOLLOWERSHIP]
#Downloads new followers at 100% of runtime unless there are followers older than 6 months.
#If this is the case it will refresh the old followers 50% of runtime.
#sql1: Checks if there are follower entries, older than 6 months. If so, these follower are refreshed
user_ids = select 1137773957115985921 as id from n_followers limit 1
;user_ids = """
;    select follows_ids as id from
;        (select fr.follows_ids, count(fr.follows_ids)
;        from facts_hashtags f, n_friends fr
;        where 1=1
;     	and f.user_id = fr.user_id
;        group by fr.follows_ids
;        having count(fr.follows_ids) >= 500
;        order by count(fr.follows_ids) desc) a
;      except select cast (user_id as text) from n_followers where retrieve_date <= replace (substring (cast(NOW() - INTERVAL '6 Month' as Text), 1, 10), '-', '')
;    """
download_limit = 12500000
sql_insert =  insert into n_users (id) select distinct user_id from n_followers except select id from n_users
sql_delete_old_followers = delete from n_followers where user_id in (select distinct user_id from temp_followers)
sql_insert_new_followers = insert into n_followers select index, username::text, user_id::numeric, fav_users, fav_ids::text, retrieve_date from temp_followers


[AUTO_RUN]
#download_followership_user_ids = select 116362700 as id from n_followers limit 1
download_followership_user_ids = select follows_ids as id from
        (select fr.follows_ids, count(fr.follows_ids)
        from facts_hashtags f, n_friends fr
        where f.user_id = fr.user_id
        group by fr.follows_ids
        having count(fr.follows_ids) >= 500
        order by count(fr.follows_ids) desc) a
        except select cast (user_id as text) from n_followers